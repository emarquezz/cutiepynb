{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to cutiepynb","text":"<p>Make your Jupyter notebooks pretty with custom colors and a table of contents.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://emarquezz.github.io/cutiepynb</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/emarquezz/cutiepynb/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>cutiepynb could always use more documentation, whether as part of the official cutiepynb docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/emarquezz/cutiepynb/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up cutiepynb for local development.</p> <ol> <li> <p>Fork the cutiepynb repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/cutiepynb.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv cutiepynb\n$ cd cutiepynb/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 cutiepynb tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/emarquezz/cutiepynb/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"core/","title":"core module","text":""},{"location":"core/#cutiepynb.core.create_new_document","title":"<code>create_new_document(document, colors)</code>","text":"<p>Add a table of contents and anchors to headings in a Jupyter notebook.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Dict[str, Union[str, Dict[str, Any], List[Dict[str, Any]]]]</code> <p>A dictionary representing a Jupyter notebook.</p> required <code>colors</code> <code>Optional[List[str]]</code> <p>A list of colors to be used for the headings.</p> required <p>Returns:</p> Type Description <code>Dict[str, Union[str, Dict[str, Any], List[Dict[str, Any]]]]</code> <p>The modified Jupyter notebook with the table of contents and anchors added.</p> Source code in <code>cutiepynb/core.py</code> <pre><code>def create_new_document(document, colors):\n    \"\"\"\n    Add a table of contents and anchors to headings in a Jupyter notebook.\n\n    Args:\n        document (Dict[str, Union[str, Dict[str, Any], List[Dict[str, Any]]]]): A dictionary representing a Jupyter notebook.\n        colors (Optional[List[str]]): A list of colors to be used for the headings.\n\n    Returns:\n        Dict[str, Union[str, Dict[str, Any], List[Dict[str, Any]]]]: The modified Jupyter notebook with the table of contents and anchors added.\n    \"\"\"\n    cells = document['cells']\n    info_to_add, new_cells = generate_new_cells(cells, colors)\n    table_of_contents = generate_contents(info_to_add)\n    document['cells'] = [table_of_contents] + new_cells\n    return document\n</code></pre>"},{"location":"core/#cutiepynb.core.create_source_anchor","title":"<code>create_source_anchor(source, values, colors)</code>","text":"<p>Add an HTML anchor element and, optionally, color to a heading in a markdown cell.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>List[str]</code> <p>The source list of strings for the markdown cell.</p> required <code>values</code> <code>Dict[str, Any]</code> <p>A dictionary with the keys 'anchor', 'title', and 'level'.</p> required <code>colors</code> <code>Optional[List[str]]</code> <p>A list of colors to be used for the headings.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>The modified source list with the anchor element and, optionally, colored heading added.</p> Source code in <code>cutiepynb/core.py</code> <pre><code>def create_source_anchor(source, values, colors):\n    \"\"\"\n    Add an HTML anchor element and, optionally, color to a heading in a markdown cell.\n\n    Args:\n        source (List[str]): The source list of strings for the markdown cell.\n        values (Dict[str, Any]): A dictionary with the keys 'anchor', 'title', and 'level'.\n        colors (Optional[List[str]]): A list of colors to be used for the headings.\n\n    Returns:\n        List[str]: The modified source list with the anchor element and, optionally, colored heading added.\n    \"\"\"\n    anchor = values['anchor']\n    title = values['title']\n    level = values['level']\n\n    # Create the anchor element\n    term_i = '&lt;a class=\"anchor\" id=\"'\n    term_f = '\"&gt;&lt;/a&gt;\\n'\n    full_term = term_i + anchor + term_f\n    # Optional: style the title with colors\n    if colors:\n        title = maquillate(title, level, colors, span=False)\n\n\n    # Add a span with a dynamic class based on the title level\n    span_class = f\"title_{level}\"\n    title_html = f'&lt;span class={span_class}{title}&lt;/span&gt;'\n\n    # Create the new source list with the anchor and title\n    new_source = [full_term] + source\n    new_source[1] = f\"#{'#' * level} {title_html}\"\n    return new_source\n</code></pre>"},{"location":"core/#cutiepynb.core.enchular_ipynb","title":"<code>enchular_ipynb(file, sns_palette=None, colors=None, update_colors=None)</code>","text":"<p>Add a table of contents and anchors to headings in a Jupyter notebook. Optionally update the colors of the titles directly in the markdown cells.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>The path to the Jupyter notebook file.</p> required <code>sns_palette</code> <code>Optional[str]</code> <p>A string representing a seaborn color palette to be used for the headings.</p> <code>None</code> <code>colors</code> <code>Optional[List[str]]</code> <p>A list of colors to be used for the headings.</p> <code>None</code> <code>update_colors</code> <code>Optional[List[str]]</code> <p>A new list of colors to update the titles with.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, Dict[str, Any], List[Dict[str, Union[str, Dict[str, Any], List[str]]]]]]</code> <p>The modified Jupyter notebook.</p> Source code in <code>cutiepynb/core.py</code> <pre><code>def enchular_ipynb(file, sns_palette=None, colors=None, update_colors=None):\n    \"\"\"\n    Add a table of contents and anchors to headings in a Jupyter notebook.\n    Optionally update the colors of the titles directly in the markdown cells.\n\n    Args:\n        file (str): The path to the Jupyter notebook file.\n        sns_palette (Optional[str]): A string representing a seaborn color palette to be used for the headings.\n        colors (Optional[List[str]]): A list of colors to be used for the headings.\n        update_colors (Optional[List[str]]): A new list of colors to update the titles with.\n\n    Returns:\n        Dict[str, Union[str, Dict[str, Any], List[Dict[str, Union[str, Dict[str, Any], List[str]]]]]]: The modified Jupyter notebook.\n    \"\"\"\n    if sns_palette:\n        pal = sns.color_palette(sns_palette, len(sns_palette))\n        colors = [i for i in pal]\n    else:\n        colors = colors\n\n    with open(file, 'r') as f:\n        document = json.load(f)\n\n    # Add the table of contents and anchor elements to the headings\n    document = create_new_document(document, colors)\n\n    # If update_colors is provided, update the heading colors directly in the notebook\n    if update_colors:\n        document = update_heading_colors_in_document(document, update_colors)\n\n    return document\n</code></pre>"},{"location":"core/#cutiepynb.core.extract_info","title":"<code>extract_info(source, titles)</code>","text":"<p>Extract heading information from a markdown cell and store it in a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>List[str]</code> <p>The source list of strings for the markdown cell.</p> required <code>titles</code> <code>Dict[int, Dict[str, Any]]</code> <p>A dictionary to store the heading information, with auto-incrementing keys.</p> required <p>Returns:</p> Type Description <code>Dict[int, Dict[str, Any]]</code> <p>The modified dictionary with the extracted heading information.</p> Source code in <code>cutiepynb/core.py</code> <pre><code>def extract_info(source, titles):\n    \"\"\"\n    Extract heading information from a markdown cell and store it in a dictionary.\n\n    Args:\n        source (List[str]): The source list of strings for the markdown cell.\n        titles (Dict[int, Dict[str, Any]]): A dictionary to store the heading information, with auto-incrementing keys.\n\n    Returns:\n        Dict[int, Dict[str, Any]]: The modified dictionary with the extracted heading information.\n    \"\"\"\n    for i, word in enumerate(source):\n        if word.startswith('#'):\n            level = len(re.findall('#', word)) - 1\n            title = word[level + 2:]\n            anchor = title.rstrip().replace(' ', '_') + '_' + str(len(titles))\n            titles[len(titles)] = {'title': title, 'level': level, 'anchor': anchor}\n    return titles\n</code></pre>"},{"location":"core/#cutiepynb.core.format_title_index","title":"<code>format_title_index(title_numb, titles)</code>","text":"<p>Format a heading for inclusion in the table of contents.</p> <p>Parameters:</p> Name Type Description Default <code>title_numb</code> <code>int</code> <p>The key for the heading information in the titles dictionary.</p> required <code>titles</code> <code>Dict[int, Dict[str, Any]]</code> <p>A dictionary with the heading information, with keys corresponding to integers.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string with the formatted heading.</p> Source code in <code>cutiepynb/core.py</code> <pre><code>def format_title_index(title_numb, titles):\n    \"\"\"\n    Format a heading for inclusion in the table of contents.\n\n    Args:\n        title_numb (int): The key for the heading information in the titles dictionary.\n        titles (Dict[int, Dict[str, Any]]): A dictionary with the heading information, with keys corresponding to integers.\n\n    Returns:\n        str: A string with the formatted heading.\n    \"\"\"\n    title = titles[title_numb]\n\n    anchor = title['anchor']\n    level = '\\t' * title['level']\n    title_format = '[' + title['title'] + ']'\n    term = f'((?:^|\\\\W){re.escape(anchor)}(?:$|\\\\W))'\n    anchor = re.sub(term, r'(#\\1)', anchor)\n\n    line = level + '+ ' + title_format + anchor + '\\n'\n\n    return line\n</code></pre>"},{"location":"core/#cutiepynb.core.generate_contents","title":"<code>generate_contents(info_to_add)</code>","text":"<p>Generate a markdown cell with a table of contents based on the heading information in a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>info_to_add</code> <code>Dict[int, Dict[str, Any]]</code> <p>A dictionary with the heading information, with keys corresponding to integers.</p> required <p>Returns:</p> Type Description <code>Dict[str, Union[str, Dict[str, Any], List[str]]]</code> <p>A dictionary representing a markdown cell with the table of contents.</p> Source code in <code>cutiepynb/core.py</code> <pre><code>def generate_contents(info_to_add):\n    \"\"\"\n    Generate a markdown cell with a table of contents based on the heading information in a dictionary.\n\n    Args:\n        info_to_add (Dict[int, Dict[str, Any]]): A dictionary with the heading information, with keys corresponding to integers.\n\n    Returns:\n        Dict[str, Union[str, Dict[str, Any], List[str]]]: A dictionary representing a markdown cell with the table of contents.\n    \"\"\"\n    cell_id = generate_corpus_id()\n    table_of_contents = {'cell_type': 'markdown', 'id': str(cell_id),\n                         'metadata': {}, 'source': [' # Table of Contents\\n']}\n\n    for title_numb in sorted(info_to_add):\n        line = format_title_index(title_numb, info_to_add)\n        table_of_contents['source'].append(line)\n\n    return table_of_contents\n</code></pre>"},{"location":"core/#cutiepynb.core.generate_new_cells","title":"<code>generate_new_cells(cells, colors)</code>","text":"<p>Generate a list of cells with anchors and, optionally, colored headings added.</p> <p>Parameters:</p> Name Type Description Default <code>cells</code> <code>List[Dict[str, Union[str, Dict[str, Any], List[str]]]]</code> <p>A list of dictionaries representing the cells in a Jupyter notebook.</p> required <code>colors</code> <code>Optional[List[str]]</code> <p>A list of colors to be used for the headings.</p> required <p>Returns:</p> Type Description <code>Tuple[Dict[int, Dict[str, Any]], List[Dict[str, Union[str, Dict[str, Any], List[str]]]]]</code> <p>A tuple with a dictionary of heading information and a list of modified cells.</p> Source code in <code>cutiepynb/core.py</code> <pre><code>def generate_new_cells(cells, colors):\n    \"\"\"\n    Generate a list of cells with anchors and, optionally, colored headings added.\n\n    Args:\n        cells (List[Dict[str, Union[str, Dict[str, Any], List[str]]]]): A list of dictionaries representing the cells in a Jupyter notebook.\n        colors (Optional[List[str]]): A list of colors to be used for the headings.\n\n    Returns:\n        Tuple[Dict[int, Dict[str, Any]], List[Dict[str, Union[str, Dict[str, Any], List[str]]]]]: A tuple with a dictionary of heading information and a list of modified cells.\n    \"\"\"\n    info_to_add = {}\n    new_cells = []\n    for cell in cells:\n        if cell['cell_type'] != 'markdown':\n            new_cells.append(cell)\n            continue\n        source = cell['source']\n\n        if not source or not source[0].startswith('#'):\n            new_cells.append(cell)\n            continue\n\n        info_to_add = extract_info(source, info_to_add)\n        number = len(info_to_add) - 1\n        if number &lt; 0:\n            new_cells.append(cell)\n            continue\n\n        values = info_to_add[number]\n        new_cell = cell\n        new_source = create_source_anchor(source, values, colors)\n        new_cell['source'] = new_source\n        new_cells.append(new_cell)\n    return info_to_add, new_cells\n</code></pre>"},{"location":"cutiepynb/","title":"cutiepynb module","text":"Source code in <code>cutiepynb/core.py</code> <pre><code>def cutiepy_nb(file, sns_palette=None, colors=None, save=True, update_colors=None):\n    doc_chulo = enchular_ipynb(file, sns_palette, colors, update_colors)\n    if save:\n        save_doc_enchulado(doc_chulo, file)\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install cutiepynb, run this command in your terminal:</p> <pre><code>pip install cutiepynb\n</code></pre> <p>This is the preferred method to install cutiepynb, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install cutiepynb from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/emarquezz/cutiepynb\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use cutiepynb in a project:</p> <pre><code>import cutiepynb\n</code></pre>"},{"location":"examples/Test/","title":"Test Notebook","text":"In\u00a0[\u00a0]: Copied!"},{"location":"examples/Test/#titulo-1","title":"Titulo 1\u00b6","text":""},{"location":"examples/Test/#titulo-2","title":"Titulo 2\u00b6","text":""},{"location":"examples/Test/#titulo-3","title":"Titulo 3\u00b6","text":""},{"location":"examples/example_notebooks/","title":"Example Notebooks","text":"<p>Here are some example notebooks that demonstrate how to use the <code>cutiepynb</code> package:</p> <ul> <li>Test.ipynb: Demonstrates how to use <code>cutiepy_nb</code> to apply colors and create a table of contents in a Jupyter Notebook.</li> <li>Another_example.ipynb: Shows additional customization options for modifying notebook headings.</li> </ul> <p>To run the examples, use the following command in your terminal: <pre><code>python run_examples.py\n</code></pre></p>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>from cutiepynb.core import cutiepy_nb\n</pre> from cutiepynb.core import cutiepy_nb In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}